package net.lyrex.dictation;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import net.lyrex.audio.Language;
import net.lyrex.audio.SpeakingSpeed;
import net.lyrex.audio.Voice;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.time.Duration;
import java.util.Comparator;
import java.util.Objects;

public class OptionDialogue extends JFrame {
    public JPanel dialoguePanel;
    private JComboBox<Language> selectLanguaceComboBox;
    private JCheckBox readFullDictateOnce;
    private JCheckBox readFullSentenceAtStartCheckbox;
    private JCheckBox readFullSentenceAtEndCheckbox;
    private JCheckBox pronuncePunctationCheckbox;
    private JComboBox<SpeakingSpeed> speakingSpeedSelection;
    private JComboBox<Voice> speakerVoiceSelection;
    private JSpinner pauseDurationRepetition;
    private JSpinner pauseDurationSentence;
    private JCheckBox hideTextWhileDictating;
    private JSpinner partRepetitionCount;
    private JLabel textLanguageLabel;
    public JButton confirmButton;
    public JButton cancelButton;

    public OptionDialogue() {
        this.setTitle("DB - Einstellungen");
        this.setContentPane(dialoguePanel);
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);

        // set-up options for spinners
        pauseDurationRepetition.setModel(new SpinnerNumberModel(3,
                0,
                30,
                0.5)
        );
        pauseDurationSentence.setModel(new SpinnerNumberModel(5,
                0,
                30,
                0.5)
        );
        partRepetitionCount.setModel(new SpinnerNumberModel(0,
                0,
                30,
                1)
        );

        /// set-up options for combo boxes
        // language selection
        for (Language l : Language.values()) {
            selectLanguaceComboBox.addItem(l);
        }

        // voice selection
        updateVoices();

        // speaking speed
        for (SpeakingSpeed s : SpeakingSpeed.values()) {
            speakingSpeedSelection.addItem(s);
        }
        speakingSpeedSelection.setSelectedItem(SpeakingSpeed.Normal);

        // set-up event listeners
        selectLanguaceComboBox.addActionListener(e -> {
            updateVoices();
        });

        this.pack();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        dialoguePanel = new JPanel();
        dialoguePanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        dialoguePanel.setEnabled(true);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        dialoguePanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(430, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textLanguageLabel = new JLabel();
        textLanguageLabel.setText("Text-Sprache");
        panel2.add(textLanguageLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, -1), null, 0, false));
        selectLanguaceComboBox = new JComboBox();
        panel2.add(selectLanguaceComboBox, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(230, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Sprecher-Stimme");
        panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, -1), null, 0, false));
        speakerVoiceSelection = new JComboBox();
        panel3.add(speakerVoiceSelection, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(230, -1), null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(11, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 230), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Diktat-Einstellungen");
        panel4.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        readFullDictateOnce = new JCheckBox();
        readFullDictateOnce.setSelected(false);
        readFullDictateOnce.setText("Diktat zu Beginn vollst채ndig vorlesen");
        panel4.add(readFullDictateOnce, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        readFullSentenceAtStartCheckbox = new JCheckBox();
        readFullSentenceAtStartCheckbox.setSelected(true);
        readFullSentenceAtStartCheckbox.setText("Satz zum Satzbeginn vollst채ndig vorlesen");
        panel4.add(readFullSentenceAtStartCheckbox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        readFullSentenceAtEndCheckbox = new JCheckBox();
        readFullSentenceAtEndCheckbox.setText("Satz zum Satzende vollst채ndig vorlesen");
        panel4.add(readFullSentenceAtEndCheckbox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pronuncePunctationCheckbox = new JCheckBox();
        pronuncePunctationCheckbox.setSelected(true);
        pronuncePunctationCheckbox.setText("Satzzeichen vorlesen");
        panel4.add(pronuncePunctationCheckbox, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hideTextWhileDictating = new JCheckBox();
        hideTextWhileDictating.setSelected(true);
        hideTextWhileDictating.setText("Text w채hrend des Diktats verstecken");
        panel4.add(hideTextWhileDictating, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel5, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Sprechgeschwindigkeit");
        panel5.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(130, -1), null, 0, false));
        speakingSpeedSelection = new JComboBox();
        panel5.add(speakingSpeedSelection, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(230, -1), null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel5.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel6, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Pause zwischen Wiederholungen (in s)");
        panel6.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pauseDurationRepetition = new JSpinner();
        panel6.add(pauseDurationRepetition, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel6.add(spacer4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel7, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Pause zwischen S채tzen (in s)");
        panel7.add(label5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pauseDurationSentence = new JSpinner();
        panel7.add(pauseDurationSentence, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        final Spacer spacer5 = new Spacer();
        panel7.add(spacer5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel4.add(panel8, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Anzahl Wiederholungen von Satzteilen");
        panel8.add(label6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        partRepetitionCount = new JSpinner();
        panel8.add(partRepetitionCount, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(60, -1), null, 0, false));
        final Spacer spacer6 = new Spacer();
        panel8.add(spacer6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel9, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Abbrechen");
        panel9.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        panel9.add(spacer7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        confirmButton = new JButton();
        confirmButton.setText("Best채tigen");
        panel9.add(confirmButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        panel1.add(spacer8, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textLanguageLabel.setLabelFor(selectLanguaceComboBox);
        label1.setLabelFor(speakerVoiceSelection);
        label3.setLabelFor(speakingSpeedSelection);
        label4.setLabelFor(pauseDurationRepetition);
        label5.setLabelFor(pauseDurationSentence);
        label6.setLabelFor(partRepetitionCount);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return dialoguePanel;
    }

    private void updateVoices() {
        speakerVoiceSelection.removeAllItems();

        final var selectedLanguage = (Language) Objects.requireNonNull(selectLanguaceComboBox.getSelectedItem());
        Voice.getAvailableVoices(selectedLanguage).stream()
                .filter(voice -> voice.getName().contains(selectedLanguage.getLanguageString()))
                .sorted(Comparator.comparing(Voice::toString))
                .forEach(voice -> speakerVoiceSelection.addItem(voice));
    }

    public void setDictateOptions(@NotNull DictateOptions options) {
        if (!isModified(options)) {
            return;
        }

        selectLanguaceComboBox.setSelectedItem(options.getLanguage());
        readFullDictateOnce.setSelected(options.getReadFullDictateOnce());
        readFullSentenceAtStartCheckbox.setSelected(options.getReadFullSentenceAtStart());
        readFullSentenceAtEndCheckbox.setSelected(options.getReadFullSentenceAtEnd());
        partRepetitionCount.setValue(options.getPartRepetitions());
        pauseDurationRepetition.setValue(options.getPauseTimeBetweenRepetitions().toSeconds());
        pauseDurationSentence.setValue(options.getPauseTimeBetweenSentences().toSeconds());
        pronuncePunctationCheckbox.setSelected(options.getPronouncePunctation());
        speakingSpeedSelection.setSelectedItem(options.getSpeakingSpeed());
        speakerVoiceSelection.setSelectedItem(options.getVoice());
        hideTextWhileDictating.setSelected(options.getHideTextWhileDictating());
    }

    public @NotNull
    DictateOptions getDictateOptions() {
        return new DictateOptions(
                (Language) Objects.requireNonNull(selectLanguaceComboBox.getSelectedItem()),
                readFullDictateOnce.isSelected(),
                readFullSentenceAtStartCheckbox.isSelected(),
                readFullSentenceAtEndCheckbox.isSelected(),
                Integer.parseInt(String.valueOf(partRepetitionCount.getValue())),
                Duration.ofMillis((long) (Float.parseFloat(String.valueOf(pauseDurationRepetition.getValue())) * 1000)),
                Duration.ofMillis((long) (Float.parseFloat(String.valueOf(pauseDurationSentence.getValue())) * 1000)),
                pronuncePunctationCheckbox.isSelected(),
                (SpeakingSpeed) Objects.requireNonNull(speakingSpeedSelection.getSelectedItem()),
                (Voice) Objects.requireNonNull(speakerVoiceSelection.getSelectedItem()),
                hideTextWhileDictating.isSelected()
        );
    }

    public boolean isModified(@NotNull DictateOptions data) {
        return selectLanguaceComboBox.getSelectedItem() != data.getLanguage() ||
                readFullDictateOnce.isSelected() != data.getReadFullDictateOnce() ||
                readFullSentenceAtStartCheckbox.isSelected() != data.getReadFullSentenceAtStart() ||
                readFullSentenceAtEndCheckbox.isSelected() != data.getReadFullSentenceAtEnd() ||
                Integer.parseInt(String.valueOf(partRepetitionCount.getValue())) != data.getPartRepetitions() ||
                Duration.ofSeconds(Long.parseLong(String.valueOf(pauseDurationRepetition.getValue()))) != data.getPauseTimeBetweenRepetitions() ||
                Duration.ofSeconds(Long.parseLong(String.valueOf(pauseDurationSentence.getValue()))) != data.getPauseTimeBetweenSentences() ||
                pronuncePunctationCheckbox.isSelected() != data.getPronouncePunctation() ||
                speakingSpeedSelection.getSelectedItem() != data.getSpeakingSpeed() ||
                speakerVoiceSelection.getSelectedItem() != data.getVoice() ||
                hideTextWhileDictating.isSelected() != data.getHideTextWhileDictating();
    }
}
