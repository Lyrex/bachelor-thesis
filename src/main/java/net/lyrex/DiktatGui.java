package net.lyrex;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import net.lyrex.audio.AudioProcessor;
import net.lyrex.image.ImageContainer;
import net.lyrex.image.ImageProcessor;
import net.lyrex.nlp.NLPProcessor;

import java.util.ArrayList;
import java.util.List;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.io.*;


public class DiktatGui {
    final private NLPProcessor nlpProcessor = new NLPProcessor();
    private List<List<String>> sentences = new ArrayList(new ArrayList(""));

    private JButton selectImageButton;
    private JButton diktatReadButton;
    private JButton button3;
    private JButton button4;
    private JButton button5;
    private JButton button6;
    private JTextArea diktatText;
    public JPanel mainPanel;

    public DiktatGui() {
        diktatReadButton.addActionListener(e -> {
            // todo(tobias): this needs to have some improved logic to be able to read proper sentences

            /*
            for (var s : sentences) {
                for (var ss : s) {
                    if (ss.isBlank()) {
                        return;
                    }

                    // todo(tobias): improve sound output logic
                    InputStream stream = new ByteArrayInputStream(AudioProcessor.textToWav(ss));
                    AudioInputStream ais =
                            null;
                    try {
                        ais = AudioSystem.getAudioInputStream(stream);
                    } catch (UnsupportedAudioFileException | IOException unsupportedAudioFileException) {
                        unsupportedAudioFileException.printStackTrace();
                    }

                    Clip clip = null;
                    try {
                        clip = AudioSystem.getClip();
                        clip.open(ais);
                    } catch (LineUnavailableException | IOException lineUnavailableException) {
                        lineUnavailableException.printStackTrace();
                    }

                    assert clip != null;
                    clip.start();
                }
            }
            */

            String s = diktatText.getText();
            if (s.isBlank()) { return; }

            // todo(tobias): improve sound output logic
            InputStream stream = new ByteArrayInputStream(AudioProcessor.textToWav(s));
            AudioInputStream ais =
                    null;
            try {
                ais = AudioSystem.getAudioInputStream(stream);
            } catch (UnsupportedAudioFileException | IOException unsupportedAudioFileException) {
                unsupportedAudioFileException.printStackTrace();
            }

            Clip clip = null;
            try {
                clip = AudioSystem.getClip();
                clip.open(ais);
            } catch (LineUnavailableException | IOException lineUnavailableException) {
                lineUnavailableException.printStackTrace();
            }

            assert clip != null;
            clip.start();
        });

        selectImageButton.addActionListener(e -> {
            final JFileChooser fc = new JFileChooser();

            if (e.getSource() == selectImageButton) {
                int returnVal = fc.showOpenDialog(mainPanel);

                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = fc.getSelectedFile();

                    diktatText.setText("Lade..");

                    // todo(tobias): improve loading times by threading
                    try {
                        var s = ImageProcessor.imageToText(new ImageContainer(file));
                        System.out.println(s);
                        diktatText.setText(s);
                        sentences = nlpProcessor.dissectText(s);
                    } catch (IOException ioException) {
                        ioException.printStackTrace();
                    }
                }
            }
        });
    }

    public void setData(DiktatGuiBinding data) {
        diktatText.setText(data.getInputText());
    }

    public void getData(DiktatGuiBinding data) {
        data.setInputText(diktatText.getText());
    }

    public boolean isModified(DiktatGuiBinding data) {
        if (diktatText.getText() != null ? !diktatText.getText().equals(data.getInputText()) : data.getInputText() != null)
            return true;
        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 2, new Insets(5, 5, 5, 5), -1, -1));
        selectImageButton = new JButton();
        selectImageButton.setText("Bild-Datei auswÃ¤hlen");
        mainPanel.add(selectImageButton, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        button3 = new JButton();
        button3.setText("Button");
        panel1.add(button3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button4 = new JButton();
        button4.setText("Button");
        panel1.add(button4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button5 = new JButton();
        button5.setText("Button");
        panel1.add(button5, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        button6 = new JButton();
        button6.setText("Button");
        panel1.add(button6, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        diktatReadButton = new JButton();
        diktatReadButton.setText("Vorlesen");
        mainPanel.add(diktatReadButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 270), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(480, 280), null, 0, false));
        diktatText = new JTextArea();
        scrollPane1.setViewportView(diktatText);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
